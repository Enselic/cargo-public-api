List and diff the public API of Rust library crates between releases and commits. Detect breaking
API changes and semver violations via CI or a CLI.

Usage: cargo public-api [OPTIONS] [COMMAND]

Commands:
  diff         Diff the public API against a published version of the crate, or between commits.
  completions  Generate completion scripts for many different shells.
  help         Print this message or the help of the given subcommand(s)

Options:
      --manifest-path <PATH>
          Path to `Cargo.toml`
          
          [default: Cargo.toml]

  -p, --package <PACKAGE>
          Name of package in workspace to list or diff the public API for

  -s, --simplified...
          Omit noisy items. Can be used more than once.
          
          | Usage | Corresponds to                                           |
          |-------|----------------------------------------------------------|
          | -s    | --omit blanket-impls                                     |
          | -ss   | --omit blanket-impls,auto-trait-impls                    |
          | -sss  | --omit blanket-impls,auto-trait-impls,auto-derived-impls |

      --omit <OMIT>
          Omit specified items

          Possible values:
          - blanket-impls:      Omit items that belong to Blanket Implementations such as `impl<T> Any for T`, `impl<T>
            Borrow<T> for T`, and `impl<T, U> Into<U> for T where U: From<T>`
          - auto-trait-impls:   Omit items that belong to Auto Trait Implementations such as `impl Send for ...`, `impl
            Sync for ...`, and `impl Unpin for ...`
          - auto-derived-impls: Omit items that belong to Auto Derived Implementations such as `Clone`, `Debug`, and
            `Eq`

  -F, --features <FEATURES>...
          Space or comma separated list of features to activate

      --all-features
          Activate all available features

      --no-default-features
          Do not activate the `default` feature

      --target <TARGET>
          Build for the target triple

      --color [<COLOR>]
          When to color the output.
          
          By default, `--color=auto` is active. Using just `--color` without an arg is equivalent to
          `--color=always`.

          Possible values:
          - auto:   Colors will be used if stdout is a terminal. Colors will not be used if stdout is a
            regular file
          - never:  Colors will never be used
          - always: Colors will always be used

  -h, --help
          Print help (see a summary with '-h')

  -V, --version
          Print version
