List and diff the public API of Rust library crates between releases and commits. Detect breaking
API changes and semver violations via CI or a CLI.

Usage: cargo public-api [OPTIONS] [COMMAND]

Commands:
  diff
          Diff the public API against a published version of the crate, or between commits.
  completions
          Generate completion scripts for many different shells.
  help
          Print this message or the help of the given subcommand(s)

Options:
      --manifest-path <PATH>
          Path to `Cargo.toml`
          
          [default: Cargo.toml]

  -p, --package <PACKAGE>
          Name of package in workspace to list or diff the public API for

  -s, --simplified...
          Omit items that belong to Blanket Implementations and Auto Trait Implementations (first
          use), and Auto Derived Implementations (second use).
          
          This makes the output significantly less noisy and repetitive, at the cost of not fully
          describing the public API.
          
          Use `--omit ...` for more control.

      --omit <OMIT>
          Omit certain kinds of items from the output to make it less noisy

          Possible values:
          - blanket-impls:
            Omit items that belong to Blanket Implementations such as `impl<T> Any for T`, `impl<T>
            Borrow<T> for T`, and `impl<T, U> Into<U> for T where U: From<T>`
          - auto-trait-impls:
            Omit items that belong to Auto Trait Implementations such as `impl Send for ...`, `impl
            Sync for ...`, and `impl Unpin for ...`
          - auto-derived-impls:
            Omit items that belong to Auto Derived Implementations such as `Clone`, `Debug`, and
            `Eq`

  -F, --features <FEATURES>...
          Space or comma separated list of features to activate

      --all-features
          Activate all available features

      --no-default-features
          Do not activate the `default` feature

      --target <TARGET>
          Build for the target triple

      --color [<COLOR>]
          How to color the output. By default, `--color=auto` is active. Using just `--color`
          without an arg is equivalent to `--color=always`

          Possible values:
          - auto:
            Colors will be used if stdout is a terminal. If you pipe the output to a file, colors
            will be disabled by default
          - never:
            Colors will never be used
          - always:
            Colors will always be used

  -h, --help
          Print help (see a summary with '-h')

  -V, --version
          Print version
