Diff the public API against a published version of the crate, or between commits.

If the diffing

* arg looks like a specific version string (`x.y.z`) then the diff will be between that published
  version of the crate and the working directory.

* arg has `..` like in `tag1..tag2` then the public API of each individual git commit will be
  diffed. See below for how that works.

* args end with `.json` like in `file1.json file2.json` then rustdoc JSON file diffing will be
  performed.


EXAMPLES:
=========

Diffing a published version of a crate against the current working tree:

    cargo public-api diff 1.2.3

Diffing the latest version of a crate against the current working tree:

    cargo public-api diff latest

Diffing working tree against a published version of a specific crate in the workspace:

    cargo public-api -p specific-crate diff 1.2.3

Diffing between commits:

    cargo public-api diff v0.2.0..v0.3.0

Diffing between rustdoc JSON files:

    cargo public-api diff first.json second.json


HOW COMMIT DIFFING WORKS:
=========================

When diffing commits, the following steps are performed:

1. Remember the current branch/commit
2. Do a literal in-tree, in-place `git checkout` of the first commit
3. Collect public API
4. Do a literal in-tree, in-place `git checkout` of the second commit
5. Collect public API
6. Print the diff between public API in step 2 and step 4
7. Restore the original branch/commit

If you have local changes, git will refuse to do `git checkout`, so your work will not be discarded.
To force `git checkout`, use `--force`.

Using the current git repo has the benefit of making it likely for the build to succeed. If we e.g.
were to git clone a temporary copy of a commit ourselves, the risk is high that additional steps are
needed before a build can succeed. Such as the need to set up git submodules.

Usage: cargo-public-api diff [OPTIONS] [ARGS]...

Arguments:
  [ARGS]...
          What to diff. See `cargo public-api diff --help` for examples and more info

Options:
      --deny <DENY>
          Exit with failure if the specified API diff is detected.
          
          Can be combined. For example, to only allow additions to the API, use `--deny=added
          --deny=changed`.

          Possible values:
          - all:     All forms of API diffs are denied: additions, changes, deletions
          - added:   Deny added things in API diffs
          - changed: Deny changed things in API diffs
          - removed: Deny removed things in API diffs

      --force
          Force the diff. For example, when diffing commits, enabling this option will discard
          working tree changes during git checkouts of other commits

  -h, --help
          Print help information (use `-h` for a summary)
