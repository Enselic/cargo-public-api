name: Release cargo-public-api + public-api

on:
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  ci:
    uses: ./.github/workflows/CI.yml

  publish:
    needs: ci
    environment:
      name: crates.io
      url: https://crates.io/crates/cargo-public-api
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # Figure out what tag to use. Do this first since we want to ensure that
      # the same tag is used for both public-api and cargo-public-api before we
      # start to cargo publish. Currently cargo publish does not support
      # publishing many crates at once. See
      # https://github.com/rust-lang/cargo/issues/1169.
      - name: calculate version
        id: version
        run: |
          version=$(cargo read-manifest --manifest-path public-api/Cargo.toml | jq --raw-output .version)
          version2=$(cargo read-manifest --manifest-path cargo-public-api/Cargo.toml | jq --raw-output .version)
          if [ "$version" != "$version2" ]; then
            echo "Version mismatch! Keep public-api and cargo-public-api versions in sync before you release! $version != $version2"
            exit 42
          fi
          echo "GIT_TAG=v${version}" >> $GITHUB_OUTPUT

      # Try to cargo publish public-api. If this succeeds we will tag the
      # release. This is because we don't want to have a situation where a
      # version exists at crates.io but not as a git tag.
      - run: cargo publish -p public-api
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

      # Push the tag to git.
      - name: push tag
        run: |
          git tag ${{ steps.version.outputs.GIT_TAG }}
          git push origin ${{ steps.version.outputs.GIT_TAG }}

      # Now before we also create a GitHub Release, also try to cargo publish
      # cargo-public-api.
      - run: cargo publish -p cargo-public-api
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

  release:
    needs: publish
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: calculate version
        id: version
        run: |
          version=$(cargo read-manifest --manifest-path public-api/Cargo.toml | jq --raw-output .version)
          echo "GIT_TAG=v${version}" >> $GITHUB_OUTPUT

      # OK, both public-api and cargo-public-api has been published under the
      # same version. Create a GitHub Release now.
      - uses: softprops/action-gh-release@d4e8205d7e959a9107da6396278b2f1f07af0f9b # 2022-12-09
        with:
          tag_name: ${{ steps.version.outputs.GIT_TAG }}
          generate_release_notes: true
